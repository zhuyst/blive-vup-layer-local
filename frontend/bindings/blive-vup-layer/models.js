// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class InitRequestData {
    /**
     * Creates a new InitRequestData instance.
     * @param {Partial<InitRequestData>} [$$source = {}] - The source object to create the InitRequestData.
     */
    constructor($$source = {}) {
        if (!("code" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["code"] = "";
        }
        if (!("config" in $$source)) {
            /**
             * @member
             * @type {LiveConfig}
             */
            this["config"] = (new LiveConfig());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InitRequestData instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {InitRequestData}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("config" in $$parsedSource) {
            $$parsedSource["config"] = $$createField1_0($$parsedSource["config"]);
        }
        return new InitRequestData(/** @type {Partial<InitRequestData>} */($$parsedSource));
    }
}

export class LiveConfig {
    /**
     * Creates a new LiveConfig instance.
     * @param {Partial<LiveConfig>} [$$source = {}] - The source object to create the LiveConfig.
     */
    constructor($$source = {}) {
        if (!("disable_llm" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["disable_llm"] = false;
        }
        if (!("disable_welcome_limit" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["disable_welcome_limit"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LiveConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {LiveConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new LiveConfig(/** @type {Partial<LiveConfig>} */($$parsedSource));
    }
}

export class Result {
    /**
     * Creates a new Result instance.
     * @param {Partial<Result>} [$$source = {}] - The source object to create the Result.
     */
    constructor($$source = {}) {
        if (!("code" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["code"] = 0;
        }
        if (!("msg" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["msg"] = "";
        }
        if (!("data" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["data"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Result instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Result}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Result(/** @type {Partial<Result>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = LiveConfig.createFrom;
